[{"title":"编程从入门到入土","url":"/code-map/","content":"<span id=\"more\"></span>\n\n<h3 id=\"1、Java核心基础\"><a href=\"#1、Java核心基础\" class=\"headerlink\" title=\"1、Java核心基础\"></a>1、Java核心基础</h3><ul>\n<li><p>Java基础</p>\n<ul>\n<li><input disabled type=\"checkbox\"> 语法</li>\n<li><input disabled type=\"checkbox\"> 数组</li>\n<li><input disabled type=\"checkbox\"> 异常处理</li>\n<li><input disabled type=\"checkbox\"> 常用类</li>\n</ul>\n</li>\n<li><p>面向对象</p>\n<ul>\n<li><input disabled type=\"checkbox\"> 封装</li>\n<li><input disabled type=\"checkbox\"> 继承</li>\n<li><input disabled type=\"checkbox\"> 多态</li>\n</ul>\n</li>\n<li><p>Java高级</p>\n<ul>\n<li><input disabled type=\"checkbox\"> 多线程</li>\n<li><input disabled type=\"checkbox\"> 集合</li>\n<li><input disabled type=\"checkbox\"> IO流</li>\n<li><input disabled type=\"checkbox\"> 注解</li>\n<li><input disabled type=\"checkbox\"> 泛型</li>\n<li><input disabled type=\"checkbox\"> 反射</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2、Java企业级开发\"><a href=\"#2、Java企业级开发\" class=\"headerlink\" title=\"2、Java企业级开发\"></a>2、Java企业级开发</h3>","categories":["学习路线"],"tags":["TODO"]},{"title":"IDEA快捷功能","url":"/idea-keymap/","content":"<span id=\"more\"></span>\n\n<h3 id=\"Ctrl\"><a href=\"#Ctrl\" class=\"headerlink\" title=\"Ctrl\"></a>Ctrl</h3><table>\n<thead>\n<tr>\n<th align=\"center\">快捷键</th>\n<th align=\"center\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Ctrl + D</td>\n<td align=\"center\">复制光标所在行 或 复制选择内容，并把复制内容插入光标位置下面</td>\n</tr>\n<tr>\n<td align=\"center\">Ctrl + C</td>\n<td align=\"center\">复制光标所在行 或 复制选择内容</td>\n</tr>\n<tr>\n<td align=\"center\">Ctrl + V</td>\n<td align=\"center\">粘贴由复制或剪切所选择的内容</td>\n</tr>\n<tr>\n<td align=\"center\">Ctrl + X</td>\n<td align=\"center\">剪切光标所在行 或 剪切选择内容</td>\n</tr>\n<tr>\n<td align=\"center\">Ctrl + Y</td>\n<td align=\"center\">删除光标所在行 或 删除选中的行</td>\n</tr>\n<tr>\n<td align=\"center\">Ctrl + Z</td>\n<td align=\"center\">撤销</td>\n</tr>\n<tr>\n<td align=\"center\">Ctrl + F</td>\n<td align=\"center\">在当前文件进行文本查找</td>\n</tr>\n<tr>\n<td align=\"center\">Ctrl + R</td>\n<td align=\"center\">在当前文件进行文本替换</td>\n</tr>\n<tr>\n<td align=\"center\">Ctrl + W</td>\n<td align=\"center\">递进式选择代码块</td>\n</tr>\n<tr>\n<td align=\"center\">Ctrl + B</td>\n<td align=\"center\">进入光标所在的方法&#x2F;变量的接口，等效于 Ctrl + 左键单击</td>\n</tr>\n<tr>\n<td align=\"center\">Ctrl + &#x2F;</td>\n<td align=\"center\">注释光标所在行代码</td>\n</tr>\n<tr>\n<td align=\"center\">Ctrl + Space</td>\n<td align=\"center\">基础代码补全</td>\n</tr>\n</tbody></table>\n<h3 id=\"Alt\"><a href=\"#Alt\" class=\"headerlink\" title=\"Alt\"></a>Alt</h3><table>\n<thead>\n<tr>\n<th align=\"center\">快捷键</th>\n<th align=\"center\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Alt + Enter</td>\n<td align=\"center\">提供快速修复选择，光标放在的位置不同提示的结果也不同</td>\n</tr>\n<tr>\n<td align=\"center\">Alt+&#x2F;</td>\n<td align=\"center\">快速补全代码</td>\n</tr>\n</tbody></table>\n<h3 id=\"Shift\"><a href=\"#Shift\" class=\"headerlink\" title=\"Shift\"></a>Shift</h3><table>\n<thead>\n<tr>\n<th align=\"center\">快捷键</th>\n<th align=\"center\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Shift + Enter</td>\n<td align=\"center\">在当前行下面生成一行空行，光标自动移到空行行首</td>\n</tr>\n<tr>\n<td align=\"center\">Shift + F9</td>\n<td align=\"center\">等效于点击工具栏的 <code>Debug</code> 按钮</td>\n</tr>\n<tr>\n<td align=\"center\">Shift + F10</td>\n<td align=\"center\">等效于点击工具栏的 <code>Run</code> 按钮</td>\n</tr>\n</tbody></table>\n<h3 id=\"Ctrl-Alt\"><a href=\"#Ctrl-Alt\" class=\"headerlink\" title=\"Ctrl+Alt\"></a>Ctrl+Alt</h3><table>\n<thead>\n<tr>\n<th align=\"center\">快捷键</th>\n<th align=\"center\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Ctrl + Alt + L</td>\n<td align=\"center\">格式化代码，可以对当前文件和整个包目录使用</td>\n</tr>\n<tr>\n<td align=\"center\">Ctrl + Alt + O</td>\n<td align=\"center\">优化导入的类，可以对当前文件和整个包目录使用</td>\n</tr>\n<tr>\n<td align=\"center\">Ctrl + Alt + T</td>\n<td align=\"center\">对选中的代码弹出环绕选项if,while,try&#x2F;catch</td>\n</tr>\n</tbody></table>\n<h3 id=\"Ctrl-Shift\"><a href=\"#Ctrl-Shift\" class=\"headerlink\" title=\"Ctrl+Shift\"></a>Ctrl+Shift</h3><table>\n<thead>\n<tr>\n<th align=\"center\">快捷键</th>\n<th align=\"center\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Ctrl + Shift + Delete</td>\n<td align=\"center\">去除相关的代码块包装</td>\n</tr>\n<tr>\n<td align=\"center\">Ctrl + Shift + F</td>\n<td align=\"center\">根据输入内容查找整个项目 或 指定目录内文件</td>\n</tr>\n<tr>\n<td align=\"center\">Ctrl + Shift + R</td>\n<td align=\"center\">根据输入内容替换对应内容，范围为整个项目 或 指定目录内文件</td>\n</tr>\n<tr>\n<td align=\"center\">Ctrl + Shift + W</td>\n<td align=\"center\">递进式取消选择代码块</td>\n</tr>\n<tr>\n<td align=\"center\">Ctrl + Shift + &#x2F;</td>\n<td align=\"center\">代码块注释</td>\n</tr>\n<tr>\n<td align=\"center\">Ctrl + Shift + Enter</td>\n<td align=\"center\">自动结束代码，行末自动添加分号</td>\n</tr>\n</tbody></table>\n<h3 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h3><table>\n<thead>\n<tr>\n<th align=\"center\">快捷键</th>\n<th align=\"center\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">.var</td>\n<td align=\"center\">自动分配变量名，在新建对象时在后面加<code>.var</code></td>\n</tr>\n<tr>\n<td align=\"center\">double shfit</td>\n<td align=\"center\">全局搜索</td>\n</tr>\n<tr>\n<td align=\"center\">Home&#x2F;End</td>\n<td align=\"center\">快速定位行首和行尾</td>\n</tr>\n<tr>\n<td align=\"center\">.（常用null,not,return…）</td>\n<td align=\"center\">快速判断返回等</td>\n</tr>\n</tbody></table>\n<h3 id=\"Templates\"><a href=\"#Templates\" class=\"headerlink\" title=\"Templates\"></a>Templates</h3><p>代码模板位于IDEA中Settings–&gt;Editor–&gt;Live Templates &#x2F;Postfix Completions</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">模板</th>\n<th align=\"center\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">psvm</td>\n<td align=\"center\">快速生成主函数main</td>\n</tr>\n<tr>\n<td align=\"center\">sout&#x2F;soutp&#x2F;soutm&#x2F;soutv</td>\n<td align=\"center\">快速生成打印语句&#x2F;参数&#x2F;方法&#x2F;变量</td>\n</tr>\n<tr>\n<td align=\"center\">fori&#x2F;itar ，iter</td>\n<td align=\"center\">快速生成普通&#x2F;增强for 循环</td>\n</tr>\n<tr>\n<td align=\"center\">list.fori&#x2F;for</td>\n<td align=\"center\">快速生成集合的普通&#x2F;增强for循环</td>\n</tr>\n<tr>\n<td align=\"center\">psf&#x2F;prsf</td>\n<td align=\"center\">快速生成共有&#x2F;私有静态常量</td>\n</tr>\n</tbody></table>\n","categories":["教程"],"tags":["IDEA","keymap"]},{"title":"Java入门","url":"/java-introduction/","content":"<span id=\"more\"></span>\n\n<p>&#x3D;&#x3D;注意：以下总结基于JDK1.8版本&#x3D;&#x3D;</p>\n<p>JDK：Java Development Kit，Java开发工具包，包含JRE</p>\n<p>JRE：Java Runtime Environment，Java运行时环境，包含JVM</p>\n<p>JVM：Java Virtual Machine，Java虚拟机</p>\n<p>JDK&#x3D;JRE+开发工具(源码编译：javac命令)</p>\n<p>JRE&#x3D;JVM+核心类库(解释运行：java命令)</p>\n<h3 id=\"Java-基础语法\"><a href=\"#Java-基础语法\" class=\"headerlink\" title=\"Java 基础语法\"></a>Java 基础语法</h3><ul>\n<li><p>程序基础</p>\n<ol>\n<li><p><strong>类</strong>：类是一个模板，它描述一类对象的行为和状态。</p>\n<p><strong>方法</strong>：方法就是行为，一个类可以有很多方法。</p>\n<p><strong>对象</strong>：对象是类的一个实例，有状态和行为。</p>\n<p><strong>实例变量</strong>：每个对象都有独特的实例变量，对象的状态由这些实例变量的值决定。</p>\n</li>\n<li><p><strong>基本语法</strong>：标识符以字母，$或_开始，大小写敏感，类名首字母大写，方法名小写字母开头，后续单词大写，源文件名与类名相同，主方法入口为psvm。</p>\n<p>Java有3种注释，单行注释，以<code>//</code>开头，直到这一行的结尾结束；多行注释以<code>/*</code>星号开头，以<code>*/</code>结束，可以有多行；或者以<code>/**</code>开头，以<code>*/</code>结束，如果有多行，每行通常以星号开头。</p>\n</li>\n<li><p><strong>关键字</strong></p>\n<ul>\n<li><p><strong>48个关键字</strong>：abstract、assert、boolean、break、byte、case、catch、char、class、continue、default、do、double、else、enum、extends、final、finally、float、for、if、implements、import、int、interface、instanceof、long、native、new、package、private、protected、public、return、short、static、strictfp、super、switch、synchronized、this、throw、throws、transient、try、void、volatile、while。</p>\n</li>\n<li><p>2个保留字：goto、const。</p>\n</li>\n<li><p>3个特殊直接量：true、false、null。</p>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>数据类型</p>\n<ol>\n<li><p><strong>八大基本数据类型</strong>（二进制补码表示，整数默认int，浮点数默认double）</p>\n<ul>\n<li><p>整数类型：byte（1B），short（2B），int（4B），long（8B）</p>\n</li>\n<li><p>浮点数类型：float（4B），double（8B）</p>\n</li>\n<li><p>字符类型：char（0&#x2F;1）</p>\n</li>\n<li><p>布尔类型：boolean（16 位 Unicode 字符）</p>\n</li>\n<li><p>自动类型转换：byte,short,char—&gt; int —&gt; long—&gt; float —&gt; double</p>\n</li>\n</ul>\n</li>\n<li><p>引用数据类型：诸如对象，数组，字符串等</p>\n</li>\n</ol>\n</li>\n<li><p>变量类型</p>\n<ul>\n<li>类变量&#x2F;静态变量：独立于方法之外的变量，用 static 修饰，一份拷贝，初始化后不可改变</li>\n<li>实例变量：独立于方法之外的变量，没有 static 修饰，具有默认值，常用private</li>\n<li>局部变量：类的方法中的变量，需要初始化，作用域为方法</li>\n</ul>\n</li>\n<li><p>修饰符</p>\n<ol>\n<li><p><strong>访问修饰符</strong>：private(方法) –&gt; default(包) –&gt; protected(同包子类) –&gt; public(所有类)</p>\n</li>\n<li><p><strong>非访问修饰符</strong>：</p>\n<p>static 修饰符，用来修饰静态类方法和类变量，一般通过类名调用，所有实例共享</p>\n<p>final 修饰符，<strong>修饰类不能够被继承，修饰方法不能被继承类重写</strong>，修饰变量为不可修改的常量</p>\n<p>abstract 修饰符，用来创建抽象类和抽象方法。</p>\n<p>synchronized 和 volatile 修饰符，主要用于线程的编程。</p>\n</li>\n</ol>\n</li>\n<li><p>运算符：算术运算符,关系运算符,位运算符,逻辑运算符,赋值运算符,三目运算符<code>?:</code>,instanceof运算符(判断实例是否为指定类型或子类)</p>\n</li>\n<li><p>流程控制</p>\n<ol>\n<li><p><strong>顺序结构</strong>：<code>;</code>结尾</p>\n</li>\n<li><p><strong>条件结构</strong>：if…else &#x2F; switch…case</p>\n</li>\n<li><p><strong>循环结构</strong>：while，do…while，for</p>\n<p>注意：break跳出当前循环代码块，continue跳转下一次循环迭代</p>\n</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><ul>\n<li>声明创建<ul>\n<li>dataType[] arrayRefVar &#x3D; new dataType[arraySize];</li>\n<li>dataType[] arrayRefVar &#x3D; {value0, value1, …, valuek};</li>\n<li>多维数组可直接多维分配空间，也可先高维分配，后低维分配</li>\n</ul>\n</li>\n<li>遍历<ul>\n<li>普通for循环按索引（从0开始）遍历</li>\n<li>增强for循环直接遍历元素</li>\n</ul>\n</li>\n<li>排序<ul>\n<li>Arrays数组类提供sort()方法进行排序</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h3><ul>\n<li><p>方法</p>\n<p>方法&#x3D;&#x3D;&gt;方法头（修饰符，返回值，方法名，形参）+ 方法体</p>\n<p>构造方法：</p>\n<ul>\n<li>默认的无参数构造方法；</li>\n<li>编译器根据参数自动判断选择哪个构造方法；</li>\n<li>构造方法相互调用，便于代码复用。</li>\n</ul>\n<p>参数绑定：</p>\n<ul>\n<li>基本类型参数的传递，是调用值的复制。</li>\n<li>引用类型参数的传递，调用方的变量，和接收方的参数变量，指向的是同一个对象。双方任意一方对这个对象的修改，都会影响对方。</li>\n</ul>\n</li>\n<li><p>重载 <strong>overload</strong></p>\n<ul>\n<li>同名方法，形参列表不同，方法签名不同</li>\n<li>一般返回值是相同的</li>\n</ul>\n</li>\n<li><p><strong>封装 Encapsulation</strong></p>\n<p>封装实现细节，对外提供接口（this.set+get），便于修改，减少耦合</p>\n</li>\n<li><p><strong>继承 Extends</strong></p>\n<ul>\n<li>单继承+多重继承，根类为object，父类通用，子类具体</li>\n<li>子类访问父类protected变量和方法，重写<strong>override</strong>，返回值和形参不变，修改核心</li>\n<li>子类不会继承任何父类的构造方法，子类显式调用<code>super()</code>并给出参数以定位到父类相应的构造方法</li>\n<li>继承是is-a关系，组合是has-a关系</li>\n<li>可以安全地向上转型为更抽象的类型；借助<code>instanceof</code>判断也可以强制向下转型</li>\n</ul>\n</li>\n<li><p><strong>多态</strong></p>\n<ul>\n<li><p>针对某个类型的方法调用，其真正执行的方法取决于运行时期实际类型的方法</p>\n</li>\n<li><p>存在的必要条件&#x3D;继承+重写+父类引用指向子类对象</p>\n</li>\n<li><p>实现方式：重写，接口，抽象类和抽象方法</p>\n</li>\n<li><p>object类定义的三个重要方法</p>\n<ul>\n<li><p>toString()：把instance输出为String；</p>\n</li>\n<li><p><strong>equals 的作用:</strong><br>  　　引用类型：默认情况下，比较的是地址值，引用类型的比较一般都会覆写该方法</p>\n</li>\n</ul>\n<p>  <strong>&#x3D;&#x3D; 的作用：</strong><br>  　　基本类型：比较的就是值是否相同<br>  　　引用类型：比较的就是地址值是否相同</p>\n<ul>\n<li>hashCode()：计算一个instance的哈希值。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>接口 <strong>Implements</strong></p>\n<ul>\n<li><p>接口比抽象类更加抽象，支持多继承</p>\n</li>\n<li><p>接口中的成员变量只能是默认public static final</p>\n</li>\n<li><p>接口都是抽象方法，默认public abstract省略，但可以定义default方法</p>\n</li>\n<li><p>接口可以继承接口，扩展功能</p>\n</li>\n</ul>\n</li>\n<li><p>抽象类和抽象方法 <strong>abstract</strong></p>\n<ul>\n<li>抽象类不能实例化对象，设计原则用于子类继承，非抽象子类必须实现父类的抽象方法</li>\n<li>抽象方法只定义方法签名（只有方法名加括号），含有抽象方法必须申明为抽象类</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"常用类\"><a href=\"#常用类\" class=\"headerlink\" title=\"常用类\"></a>常用类</h3><ul>\n<li><p><strong>String</strong></p>\n<ul>\n<li><p>可以直接创建（存储在公共池中），也可以new创建（新建对象在堆上）</p>\n</li>\n<li><p>常用操作：</p>\n<ul>\n<li>长度lenth()，拼接concat()或+</li>\n<li>索引查找indexOf()，子串查看contains()</li>\n<li>提取子串substring()，替换子串replace()</li>\n<li>格式化字符串String.format()，占位符：整数<code>%s</code>字符串<code>%s</code>浮点数<code>%f</code></li>\n<li>类型转换：String.valueOf()，Integer.parseInt()，toCharArray()</li>\n</ul>\n</li>\n<li><p>字符编码：ASCII（1B）&#x3D;&gt; GB2312（1B）&#x3D;&gt; Unicode（2B+）&#x3D;&gt; UTF-8（1-4B）</p>\n<p>java使用unicode编码表示String 和char，转换编码就是String和byte()转换（优先考虑UTF-8）</p>\n</li>\n<li><p>String 是不可变对象，操作不改变原对象，二是返回新的字符串</p>\n</li>\n<li><p>StringBuffer和<strong>StringBuilder</strong>（可变对象，链式操作自身）</p>\n</li>\n</ul>\n</li>\n<li><p>Math</p>\n<ul>\n<li>数学计算库：min&#x2F;max，abs，pow&#x2F;sqrt，exp&#x2F;log ……</li>\n</ul>\n</li>\n<li><p>Random</p>\n<ul>\n<li>&#96;&#96;&#96;java<br>Random r &#x3D; new Random(seed);<br>int temp &#x3D; r.nextInt(10);<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">  - SecureRandom：生成安全的随机数</span><br><span class=\"line\"></span><br><span class=\"line\">- 大数：BigInteger和BigDecimal</span><br><span class=\"line\"></span><br><span class=\"line\">- 枚举</span><br><span class=\"line\"></span><br><span class=\"line\">  - 枚举是特殊的类，为了做信息的标识和分类，声明一组带标识符的常数</span><br><span class=\"line\"></span><br><span class=\"line\">  - name()获取枚举常量的名字，ordinal()获取常量定义的顺序</span><br><span class=\"line\"></span><br><span class=\"line\">  - ```java</span><br><span class=\"line\">    enum Color</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        RED,GREEN,BLUE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Color c = Color.RED; // 不能new实例，实际上枚举实例都是唯一</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>日期时间</p>\n<ul>\n<li>Date和Calendar（旧API）; 格式化SimpleDateFormat</li>\n<li>yyyy：年、MM：月、dd: 日、HH: 小时、mm: 分钟、ss: 秒</li>\n<li>LocalDateTime（新API）；格式化DateTimeFormatter</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h3><ul>\n<li>Error表示严重错误，无法处理；而Exception是运行时错误，可以被捕获并处理。不需要捕获的异常，包括<code>Error</code>及其子类，<code>RuntimeException</code>及其子类不做强制性捕获要求，剩下必须捕获的又称为检查性异常</li>\n</ul>\n<p><img src=\"/java-introduction/error.png\" alt=\"error\"></p>\n<ul>\n<li>采用try…catch…finally捕获异常；调用<code>printStackTrace()</code>可以打印异常的传播栈</li>\n<li>只要是方法声明的Checked Exception，就需要在调用层捕获或者抛出</li>\n<li>日志库取代手动打印<ul>\n<li>java.util.logging</li>\n<li>Apache第三方日志库Commons Logging，自动搜索挂接Log4j</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"集合类\"><a href=\"#集合类\" class=\"headerlink\" title=\"集合类\"></a>集合类</h3><p>Java标准库自带的<code>java.util</code>包提供了集合类：<code>Collection</code>，它是除<code>Map</code>外所有其他集合类的根接口。优点有：接口和实现分离，支持泛型，通过迭代器统<strong>Iterator</strong>一访问集合。</p>\n<ul>\n<li><p><strong>List</strong></p>\n<ul>\n<li><p>有序列表：数组实现ArrayList和链表实现LinkedList</p>\n</li>\n<li><pre><code class=\"java\">List&lt;T&gt; list = new ArrayList&lt;T&gt;();\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- ```java</span><br><span class=\"line\">  // 常用遍历方式,高效</span><br><span class=\"line\">  for(T t : list)&#123;</span><br><span class=\"line\">      System.out.println(t);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n</li>\n<li><p>其它操作：add、get、set、remove、size</p>\n</li>\n<li><p>在List中查找元素时，List的实现类通过元素的equals()方法比较两个元素是否相等，因此，放入的元素必须正确<strong>重写equals()方法</strong>。</p>\n</li>\n</ul>\n</li>\n<li><p><strong>Map</strong></p>\n<ul>\n<li><p>键值映射表，通过key高效查找value，Map查找速度比List快，可作为缓存</p>\n</li>\n<li><p>key无序HashMap，有序TreeMap</p>\n</li>\n<li><pre><code class=\"java\">Map&lt;K,V&gt; map = new HashMap&lt;K,V&gt;();\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- ```java</span><br><span class=\"line\">  // 遍历key</span><br><span class=\"line\">  for(String key : map.keySet())&#123;</span><br><span class=\"line\">      int value = map.get(key);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // 遍历key-value</span><br><span class=\"line\">  for(Map.Entry&lt;String, int&gt; entry : map.entrySet())&#123;</span><br><span class=\"line\">      String key = entry.getKey();</span><br><span class=\"line\">      String value = entry.getValue();</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n</li>\n<li><p>其它操作：put(key,value)、get(key)、size()</p>\n</li>\n<li><p>map采用空间换时间的方式，key通过hashCode()计算数组索引，返回对应value</p>\n<ul>\n<li>作为key的对象必须正确<strong>重写equals()方法</strong></li>\n<li>作为key的对象还必须正确<strong>重写hashCode()方法</strong>，并且保证相等对象哈希值相等（保证正确性），不相等对象哈希值尽量不相等（减少冲突）</li>\n</ul>\n</li>\n<li><p>hashmap内部使用数组默认大小为16，自动扩容*2，但需要重现计算索引，避免影响性能，一般提前预设定好大小</p>\n</li>\n<li><p>哈希冲突：利用list存储不同key但hashcode相同的value</p>\n</li>\n</ul>\n</li>\n<li><p><strong>Set</strong></p>\n<ul>\n<li><p>不重复的元素集合，相当于只有不重复的key</p>\n</li>\n<li><p>无序HashSet，有序TreeSet</p>\n</li>\n<li><pre><code class=\"java\">Set&lt;T&gt; set = new HashSet&lt;T&gt;();\n</code></pre>\n</li>\n<li><p>其它操作：add、remove、contains、size</p>\n</li>\n<li><p>放入Set的元素和Map的key类似，要正确<strong>重写equals()和hashCode()方法</strong>，否则元素无法正确加入Set</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"反射\"><a href=\"#反射\" class=\"headerlink\" title=\"反射\"></a>反射</h3><h3 id=\"注解\"><a href=\"#注解\" class=\"headerlink\" title=\"注解\"></a>注解</h3><h3 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h3><h3 id=\"IO-流\"><a href=\"#IO-流\" class=\"headerlink\" title=\"IO 流\"></a>IO 流</h3><h3 id=\"多线程\"><a href=\"#多线程\" class=\"headerlink\" title=\"多线程\"></a>多线程</h3>","categories":["学习路线","Java"],"tags":["Java"]},{"title":"Hello_Hexo","url":"/hello-hexo/","content":"<span id=\"more\"></span>\n\n<p>详情可访问<a href=\"https://hexo.io/docs/\">Hexo官方文档</a></p>\n<h3 id=\"Hexo命令\"><a href=\"#Hexo命令\" class=\"headerlink\" title=\"Hexo命令\"></a>Hexo命令</h3><ul>\n<li>初始化博客</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo init</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>新建页面</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new page <span class=\"string\">&quot;my_page&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>新建文章</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;my_blog&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>启动服务，本地预览博客</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>生成静态网页文件(位于public文件夹)</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>清空缓存即public文件夹</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>部署网站到服务器</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><ul>\n<li>站点配置文件：根目录下_config,yml</li>\n<li>主题配置文件：主题目录下_config.yml</li>\n<li>NexT主题配置，详见<a href=\"http://theme-next.iissnan.com/\">NexT使用文档</a></li>\n</ul>\n<h3 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h3><ul>\n<li><a href=\"https://www.laijiahao.cn/posts/a1047ed6/\">搭建hexo博客</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/26625249/\">GitHub+Hexo 搭建个人网站详细教程</a></li>\n<li><a href=\"https://notes.iissnan.com/\">IIssNan’s Notes</a></li>\n</ul>\n","categories":["教程"],"tags":["Hexo"]},{"title":"demo","url":"/demo/","content":"<p><img src=\"/demo/dog.png\" alt=\"dog\"></p>\n<span id=\"more\"></span>\n\n\n\n<div class=\"tabs\" id=\"dog\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#dog-1\">A</a></li><li class=\"tab\"><a href=\"#dog-2\">B</a></li><li class=\"tab\"><a href=\"#dog-3\">C</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"dog-1\"><p><strong>选项卡 1</strong> </p></div><div class=\"tab-pane\" id=\"dog-2\"><p><strong>选项卡 2</strong></p></div><div class=\"tab-pane\" id=\"dog-3\"><p><strong>选项卡 3</strong> </p></div></div></div>\n","tags":["Test"]}]